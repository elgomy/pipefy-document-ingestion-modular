#!/usr/bin/env python3
"""
Script de teste manual para integra√ß√£o com APIs de CNPJ.

Este script permite testar manualmente as funcionalidades de:
- Consulta de dados de CNPJ
- Gera√ß√£o de cart√µes CNPJ
- Cache e armazenamento
- Valida√ß√£o para triagem
"""

import asyncio
import json
import os
import sys
from datetime import datetime
from pathlib import Path

# Adicionar o diret√≥rio raiz ao path
sys.path.insert(0, str(Path(__file__).parent.parent))

try:
    from src.services.cnpj_service import cnpj_service, CNPJServiceError
    from src.integrations.cnpj_client import cnpj_client, CNPJAPIError
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o: {e}")
    print("Verifique se todas as depend√™ncias est√£o instaladas")
    sys.exit(1)


class CNPJTestRunner:
    """Classe para executar testes manuais de CNPJ."""
    
    def __init__(self):
        self.test_cnpjs = [
            "11.222.333/0001-81",  # CNPJ de teste (pode n√£o existir)
            "11222333000181",      # Mesmo CNPJ sem formata√ß√£o
            "00.000.000/0000-00",  # CNPJ inv√°lido
            "123",                 # Formato inv√°lido
        ]
    
    def print_header(self, title: str):
        """Imprime cabe√ßalho formatado."""
        print("\n" + "="*60)
        print(f" {title}")
        print("="*60)
    
    def print_result(self, result: dict, title: str = "Resultado"):
        """Imprime resultado formatado."""
        print(f"\n{title}:")
        print(json.dumps(result, indent=2, ensure_ascii=False, default=str))
    
    async def test_cnpj_validation(self):
        """Testa valida√ß√£o de CNPJs."""
        self.print_header("TESTE 1: Valida√ß√£o de CNPJs")
        
        for cnpj in self.test_cnpjs:
            print(f"\nTestando CNPJ: {cnpj}")
            
            # Teste de valida√ß√£o b√°sica
            is_valid = cnpj_client._validate_cnpj(cnpj)
            print(f"Valida√ß√£o b√°sica: {'‚úÖ V√°lido' if is_valid else '‚ùå Inv√°lido'}")
            
            if is_valid:
                # Teste de formata√ß√£o
                formatted = cnpj_client._format_cnpj(cnpj)
                cleaned = cnpj_client._clean_cnpj(cnpj)
                print(f"Formatado: {formatted}")
                print(f"Limpo: {cleaned}")
    
    async def test_cnpj_api_query(self):
        """Testa consulta nas APIs de CNPJ."""
        self.print_header("TESTE 2: Consulta nas APIs de CNPJ")
        
        # Usar apenas CNPJs v√°lidos para teste de API
        valid_cnpjs = [cnpj for cnpj in self.test_cnpjs if cnpj_client._validate_cnpj(cnpj)]
        
        for cnpj in valid_cnpjs[:1]:  # Testar apenas o primeiro para n√£o sobrecarregar APIs
            print(f"\nConsultando CNPJ: {cnpj}")
            
            try:
                # Teste direto do cliente
                cnpj_data = await cnpj_client.get_cnpj_data(cnpj)
                
                result = {
                    "cnpj": cnpj_data.cnpj,
                    "razao_social": cnpj_data.razao_social,
                    "situacao_cadastral": cnpj_data.situacao_cadastral,
                    "uf": cnpj_data.uf,
                    "municipio": cnpj_data.municipio,
                    "api_source": cnpj_data.api_source,
                    "consulted_at": cnpj_data.consulted_at.isoformat()
                }
                
                self.print_result(result, "‚úÖ Dados obtidos com sucesso")
                
            except CNPJAPIError as e:
                print(f"‚ùå Erro na API: {e.message}")
                if e.api_name:
                    print(f"API: {e.api_name}")
                if e.status_code:
                    print(f"Status: {e.status_code}")
            except Exception as e:
                print(f"‚ùå Erro inesperado: {e}")
    
    async def test_simple_validation(self):
        """Teste simples de valida√ß√£o sem depend√™ncias externas."""
        self.print_header("TESTE SIMPLES: Valida√ß√£o B√°sica")
        
        print("Testando valida√ß√£o de CNPJ sem APIs externas...")
        
        test_cases = [
            ("11.222.333/0001-81", "CNPJ formatado v√°lido"),
            ("11222333000181", "CNPJ sem formata√ß√£o v√°lido"),
            ("00.000.000/0000-00", "CNPJ inv√°lido"),
            ("123", "Formato inv√°lido"),
            ("", "CNPJ vazio"),
            ("11111111111111", "CNPJ com d√≠gitos iguais")
        ]
        
        for cnpj, description in test_cases:
            try:
                is_valid = cnpj_client._validate_cnpj(cnpj)
                status = "‚úÖ V√°lido" if is_valid else "‚ùå Inv√°lido"
                print(f"{description}: {cnpj} -> {status}")
                
                if is_valid:
                    formatted = cnpj_client._format_cnpj(cnpj)
                    cleaned = cnpj_client._clean_cnpj(cnpj)
                    print(f"  Formatado: {formatted}")
                    print(f"  Limpo: {cleaned}")
                    
            except Exception as e:
                print(f"  ‚ùå Erro: {e}")
    
    async def test_cnpj_service_cache(self):
        """Testa funcionalidades de cache do servi√ßo."""
        self.print_header("TESTE 3: Cache do Servi√ßo de CNPJ")
        
        valid_cnpjs = [cnpj for cnpj in self.test_cnpjs if cnpj_client._validate_cnpj(cnpj)]
        
        if not valid_cnpjs:
            print("‚ùå Nenhum CNPJ v√°lido para testar cache")
            return
        
        cnpj = valid_cnpjs[0]
        print(f"Testando cache com CNPJ: {cnpj}")
        
        try:
            # 1. Primeira consulta (deve ir para API)
            print("\n1. Primeira consulta (API)...")
            start_time = datetime.now()
            result1 = await cnpj_service.get_cnpj_data(cnpj, use_cache=True)
            time1 = (datetime.now() - start_time).total_seconds()
            print(f"‚úÖ Consulta realizada em {time1:.2f}s")
            print(f"Fonte: {result1.api_source}")
            
            # 2. Segunda consulta (deve usar cache)
            print("\n2. Segunda consulta (cache)...")
            start_time = datetime.now()
            result2 = await cnpj_service.get_cnpj_data(cnpj, use_cache=True)
            time2 = (datetime.now() - start_time).total_seconds()
            print(f"‚úÖ Consulta realizada em {time2:.2f}s")
            print(f"Fonte: {result2.api_source}")
            
            # 3. Verificar se dados s√£o iguais
            if result1.cnpj == result2.cnpj and result1.razao_social == result2.razao_social:
                print("‚úÖ Dados do cache s√£o consistentes")
            else:
                print("‚ùå Dados do cache s√£o inconsistentes")
            
            # 4. Listar CNPJs em cache
            cached_list = cnpj_service.list_cached_cnpjs()
            print(f"\n‚úÖ CNPJs em cache: {len(cached_list)}")
            
        except Exception as e:
            print(f"‚ùå Erro no teste de cache: {e}")
    
    async def test_cnpj_card_generation(self):
        """Testa gera√ß√£o de cart√µes CNPJ."""
        self.print_header("TESTE 4: Gera√ß√£o de Cart√µes CNPJ")
        
        valid_cnpjs = [cnpj for cnpj in self.test_cnpjs if cnpj_client._validate_cnpj(cnpj)]
        
        if not valid_cnpjs:
            print("‚ùå Nenhum CNPJ v√°lido para testar gera√ß√£o de cart√£o")
            return
        
        cnpj = valid_cnpjs[0]
        case_id = f"TEST_CASE_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        print(f"Gerando cart√£o para CNPJ: {cnpj}")
        print(f"Case ID: {case_id}")
        
        try:
            # Gerar cart√£o (sem salvar na base de dados para teste)
            result = await cnpj_service.gerar_e_armazenar_cartao_cnpj(
                cnpj=cnpj,
                case_id=case_id,
                save_to_database=False
            )
            
            if result["success"]:
                print("‚úÖ Cart√£o gerado com sucesso!")
                self.print_result({
                    "cnpj": result["cnpj"],
                    "razao_social": result["razao_social"],
                    "file_path": result["file_path"],
                    "generated_at": result["generated_at"],
                    "api_source": result["api_source"]
                })
                
                # Verificar se arquivo foi criado
                if os.path.exists(result["file_path"]):
                    print(f"‚úÖ Arquivo criado: {result['file_path']}")
                    
                    # Mostrar conte√∫do do arquivo
                    with open(result["file_path"], 'r', encoding='utf-8') as f:
                        card_content = json.load(f)
                    
                    print("\nüìÑ Conte√∫do do cart√£o:")
                    print(json.dumps(card_content, indent=2, ensure_ascii=False, default=str))
                else:
                    print(f"‚ùå Arquivo n√£o encontrado: {result['file_path']}")
            else:
                print("‚ùå Falha na gera√ß√£o do cart√£o")
                self.print_result(result)
                
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o do cart√£o: {e}")
    
    async def test_cnpj_validation_for_triagem(self):
        """Testa valida√ß√£o de CNPJ para triagem."""
        self.print_header("TESTE 5: Valida√ß√£o para Triagem")
        
        for cnpj in self.test_cnpjs:
            print(f"\nValidando CNPJ para triagem: {cnpj}")
            
            try:
                result = await cnpj_service.validate_cnpj_for_triagem(cnpj)
                
                if result["valid"]:
                    print("‚úÖ CNPJ v√°lido para triagem")
                    self.print_result({
                        "cnpj": result["cnpj"],
                        "razao_social": result["razao_social"],
                        "situacao_ativa": result["situacao_ativa"],
                        "uf": result["uf"],
                        "warnings": result.get("warnings", [])
                    })
                else:
                    print(f"‚ùå CNPJ inv√°lido: {result['error']}")
                    
            except Exception as e:
                print(f"‚ùå Erro na valida√ß√£o: {e}")
    
    async def test_cache_management(self):
        """Testa gerenciamento de cache."""
        self.print_header("TESTE 6: Gerenciamento de Cache")
        
        # Estat√≠sticas do cache
        stats = cnpj_service.get_cnpj_cache_statistics()
        print("üìä Estat√≠sticas do cache:")
        self.print_result(stats)
        
        # Listar CNPJs em cache
        cached_cnpjs = cnpj_service.list_cached_cnpjs()
        print(f"\nüìã CNPJs em cache: {len(cached_cnpjs)}")
        for cached in cached_cnpjs[:3]:  # Mostrar apenas os 3 primeiros
            print(f"  - {cached['cnpj']} | {cached['razao_social']} | V√°lido: {cached['is_valid']}")
        
        # Listar cart√µes gerados
        generated_cards = cnpj_service.list_generated_cards()
        print(f"\nüóÇÔ∏è Cart√µes gerados: {len(generated_cards)}")
        for card in generated_cards[:3]:  # Mostrar apenas os 3 primeiros
            print(f"  - {card['cnpj']} | {card['razao_social']} | {card['generated_at']}")
        
        # Op√ß√£o de limpeza de cache (comentada para seguran√ßa)
        # print("\nüßπ Limpando cache expirado...")
        # removed = cnpj_service.clear_cache(older_than_hours=24)
        # print(f"‚úÖ {removed} arquivos de cache removidos")
    
    async def run_all_tests(self):
        """Executa todos os testes."""
        print("üöÄ Iniciando testes de integra√ß√£o CNPJ")
        print(f"Timestamp: {datetime.now().isoformat()}")
        
        tests = [
            self.test_simple_validation,
            self.test_cnpj_validation,
            self.test_cnpj_api_query,
            self.test_cnpj_service_cache,
            self.test_cnpj_card_generation,
            self.test_cnpj_validation_for_triagem,
            self.test_cache_management
        ]
        
        for i, test in enumerate(tests, 1):
            try:
                await test()
            except Exception as e:
                print(f"\n‚ùå Erro no teste {i}: {e}")
                import traceback
                traceback.print_exc()
        
        print("\n" + "="*60)
        print(" üèÅ TESTES CONCLU√çDOS")
        print("="*60)


async def main():
    """Fun√ß√£o principal."""
    print("üîß Teste Manual de Integra√ß√£o CNPJ")
    print("Este script testa as funcionalidades de CNPJ do sistema.")
    
    # Verificar configura√ß√£o
    print("\nüìã Verificando configura√ß√£o...")
    
    # Verificar se diret√≥rios existem
    data_dir = Path("data")
    if not data_dir.exists():
        print("üìÅ Criando diret√≥rio data/")
        data_dir.mkdir(exist_ok=True)
    
    runner = CNPJTestRunner()
    
    # Menu interativo
    while True:
        print("\n" + "="*50)
        print(" MENU DE TESTES")
        print("="*50)
        print("1. Teste Simples (Valida√ß√£o)")
        print("2. Valida√ß√£o de CNPJs")
        print("3. Consulta nas APIs")
        print("4. Teste de Cache")
        print("5. Gera√ß√£o de Cart√µes")
        print("6. Valida√ß√£o para Triagem")
        print("7. Gerenciamento de Cache")
        print("8. Executar Todos os Testes")
        print("0. Sair")
        
        choice = input("\nEscolha uma op√ß√£o: ").strip()
        
        if choice == "0":
            print("üëã Saindo...")
            break
        elif choice == "1":
            await runner.test_simple_validation()
        elif choice == "2":
            await runner.test_cnpj_validation()
        elif choice == "3":
            await runner.test_cnpj_api_query()
        elif choice == "4":
            await runner.test_cnpj_service_cache()
        elif choice == "5":
            await runner.test_cnpj_card_generation()
        elif choice == "6":
            await runner.test_cnpj_validation_for_triagem()
        elif choice == "7":
            await runner.test_cache_management()
        elif choice == "8":
            await runner.run_all_tests()
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
        
        input("\nPressione Enter para continuar...")


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\nüëã Teste interrompido pelo usu√°rio")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
        import traceback
        traceback.print_exc() 