#!/usr/bin/env python3
"""
Tests de Integraci√≥n End-to-End - Arquitectura Modular H√≠brida
Document Triaging Agent v2.0

Este archivo valida la comunicaci√≥n entre los dos servicios independientes:
1. Backend API (pipefy-document-ingestion-v2) - L√≥gica de negocio completa
2. CrewAI Service (pipefy-crewai-analysis-v2) - Solo an√°lisis con herramientas simples

Tests incluidos:
- Health checks de ambos servicios
- Comunicaci√≥n HTTP entre servicios
- Flujos completos de webhook ‚Üí an√°lisis ‚Üí respuesta
- Integraci√≥n con Supabase
- Mocks de APIs externas (CNPJ√°, Twilio, Pipefy)
"""

import pytest
import asyncio
import httpx
import json
import os
from datetime import datetime
from typing import Dict, Any, Optional
from unittest.mock import AsyncMock, patch, MagicMock

# URLs de los servicios (configurables via env vars)
BACKEND_URL = os.getenv("BACKEND_URL", "http://localhost:8000")
CREWAI_URL = os.getenv("CREWAI_URL", "http://localhost:8001")

# URLs de producci√≥n para tests remotos
BACKEND_PROD_URL = "https://pipefy-document-ingestion-v2.onrender.com"
CREWAI_PROD_URL = "https://pipefy-crewai-analysis-v2.onrender.com"

class TestE2EArchitectureValidation:
    """Tests para validar la arquitectura modular h√≠brida"""
    
    @pytest.mark.asyncio
    async def test_backend_service_health(self):
        """Test 1: Verificar que el Backend API responda correctamente"""
        async with httpx.AsyncClient(timeout=30.0) as client:
            try:
                response = await client.get(f"{BACKEND_URL}/health")
                assert response.status_code == 200
                
                health_data = response.json()
                assert "status" in health_data
                assert health_data["status"] == "healthy"
                assert "service" in health_data
                assert "backend" in health_data["service"].lower()
                
                print(f"‚úÖ Backend Service Health OK: {health_data}")
                
            except httpx.ConnectError:
                pytest.skip(f"Backend service not available at {BACKEND_URL}")

# Funci√≥n para ejecutar todos los tests
async def run_all_e2e_tests():
    """Ejecutar todos los tests E2E en secuencia"""
    print("üöÄ Iniciando Tests de Integraci√≥n End-to-End")
    print("=" * 60)
    
    test_classes = [TestE2EArchitectureValidation]
    
    total_tests = 0
    passed_tests = 0
    
    for test_class in test_classes:
        print(f"\nüìã Ejecutando {test_class.__name__}")
        print("-" * 40)
        
        instance = test_class()
        test_methods = [method for method in dir(instance) if method.startswith('test_')]
        
        for method_name in test_methods:
            total_tests += 1
            try:
                method = getattr(instance, method_name)
                await method()
                passed_tests += 1
                print(f"‚úÖ {method_name}")
            except Exception as e:
                print(f"‚ùå {method_name}: {str(e)}")
    
    print(f"\n" + "=" * 60)
    print(f"üéØ RESULTADOS FINALES: {passed_tests}/{total_tests} tests passed")
    print(f"üìä Success Rate: {(passed_tests/total_tests)*100:.1f}%")
    
    if passed_tests == total_tests:
        print("üéâ TODOS LOS TESTS E2E PASARON EXITOSAMENTE!")
    else:
        print("‚ö†Ô∏è Algunos tests fallaron. Revisar logs arriba.")
    
    return passed_tests == total_tests

if __name__ == "__main__":
    # Ejecutar tests E2E
    result = asyncio.run(run_all_e2e_tests())
    exit(0 if result else 1)